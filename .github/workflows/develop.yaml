# https://www.freecodecamp.org/news/a-lightweight-tool-agnostic-ci-cd-flow-with-github-actions/
name: build-develop

on:
  push:
    branches:
      - develop
      - feature/**
      - bugfix/**
      - hotfix/**
    paths-ignore:
      - '**/README.md' # https://stackoverflow.com/questions/62968897/is-it-possible-to-not-run-github-action-for-readme-updates/62972393#62972393

jobs:
  test:
    name: Run Test Cases
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Golang test
        run: make test

  dependencies:
    name: Build Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          # https://github.com/actions/checkout/pull/258 needs to fetch all tags so that Makefile can make the correct version
          fetch-depth: 0

      - name: Build OS and Golang Dependencies
        run: make build-dependencies
        # outputs: the docker image with dependencies that can be used as cache for the binaries
        # marcellodesales/cloner/dependencies:20.09.12

      # https://github.community/t/cache-a-docker-image-built-in-workflow/16260/9
      # Produces the docker image at the directory ./dist/docker-image.raw
      - name: Save Raw Docker Image for Dependencies
        run: make save-dependencies-docker-image
        # outputs: cloner-dependencies.dockerimage

      # Local cache of docker images
      - name: Upload Docker Image for Dependencies
        uses: actions/upload-artifact@v2
        with:
          name: cloner.dockerimage
          path: dist/cloner-dependencies.dockerimage

  # https://github.com/nightlark/ninja/blob/f1a33131154ae7d9648aa82afac462859535fb62/.github/workflows/release-ninja-binaries.yml#L8-L34
  compile:
    name: Compile CLI as Binaries
    runs-on: ${{ matrix.os }}
    needs: dependencies
    strategy:
      matrix:
        os: [darwin, linux, windows]
        include:
          - os: darwin
            extension:
          - os: linux
            extension:
          - os: windows
            extension: .exe
    steps:
      - uses: actions/checkout@v2
        with:
          # https://github.com/actions/checkout/pull/258 needs to fetch all tags so that Makefile can make the correct version
          fetch-depth: 0

      - name: Download Docker Image for Dependencies as cache
        uses: actions/download-artifact@v2
        with:
          name: cloner-dependencies.dockerimage

      - name: Load Docker Image Dependencies for cache to compile
        run: |
          ls -la ./cloner.dockerimage
          docker load -i ./cloner-dependencies.dockerimage

      # Compiles for OS specific dependencies through Dockerkit
      - name: Compile for ${{matrix.os}}
        env:
          OS_NAME: ${{ matrix.os }}
        run: make compile-${OS_NAME}

      # Compiles for OS specific dependencies through Dockerkit
      - name: Get distribution binaries for ${{matrix.os}}
        env:
          OS_NAME: ${{ matrix.os }}
        run: make dist-${OS_NAME}

      - name: Upload ${{ matrix.os }} Binary
        uses: actions/upload-artifact@v2
        with:
          name: cloner-${{ matrix.os }}-amd64.${{ matrix.extension }}
          path: dist/cloner-${{ matrix.os }}-amd64.${{ matrix.extension }}

      # Compiles for OS specific dependencies through Dockerkit
      - name: Save docker runtime image for ${{matrix.os}}
        if: matrix.os == 'linux'
        env:
          OS_NAME: ${{ matrix.os }}
        run: make save-docker-image
        # output: docker image saved at ./dist/cloner.dockerimage

      - name: Upload runtime docker image
        uses: actions/upload-artifact@v2
        if: matrix.os == 'linux'
        with:
          name: cloner.dockerimage
          path: ./dist/cloner.dockerimage

  # https://github.com/nightlark/ninja/blob/f1a33131154ae7d9648aa82afac462859535fb62/.github/workflows/release-ninja-binaries.yml#L8-L34
  verify:
    name: Verify CLI Binaries
    runs-on: ${{ matrix.os }}
    needs: compile
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        include:
          - os: ubuntu-latest
            bin_name: cloner-linux-amd64
          - os: macOS-latest
            bin_name: cloner-darwin-amd64
          - os: windows-latest
            bin_name: cloner-windows-amd64.exe
    steps:
      - name: Download artifact ${{ matrix.bin_name }} from build
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.bin_name }}

      # Verify OS specific dependencies
      - name: Unix Binary Validation
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
        env:
          BIN_NAME: ${{ matrix.bin_name }}
        run: |
          ls -la ./${BIN_NAME}
          chmod +x ./${BIN_NAME}
          file ./${BIN_NAME}
          ./${BIN_NAME}

      - name: Windows Binary Validation
        if: matrix.os == 'windows-latest'
        env:
          BIN_NAME: ${{ matrix.bin_name }}
        # start-process -nonewwindow https://stackoverflow.com/questions/53961802/how-to-use-an-environment-variable-in-powershell-command/53963070#53963070
        run: |
          dir
          echo $pwd\$env:BIN_NAME
          start-process -nonewwindow $pwd\$env:BIN_NAME

  e2e:
    name: Verify Dockerized E2E Test
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - uses: actions/checkout@v2
        with:
          # https://github.com/actions/checkout/pull/258 needs to fetch all tags so that Makefile can make the correct version
          fetch-depth: 0

      - name: Download artifact cloner.dockerimage from build
        uses: actions/download-artifact@v2
        with:
          name: cloner.dockerimage

      - name: Load Docker Image Binary for cache
        run: |
          ls -la ./cloner.dockerimage
          docker load -i ./cloner.dockerimage

      # https://docs.github.com/en/actions/reference/encrypted-secrets as secrets can't be written to files directly
      # Moved the decrypt function to Makefile (test-e2e)
      # Not using https://github.com/webfactory/ssh-agent creates a .known_hosts with the keys
      - name: Run cloner from Docker with Private Key
        env:
          ID_CLONER_TEST_PASSPHRASE: ${{ secrets.ID_CLONER_TEST_PASSPHRASE }}
        run: make test-e2e

      - name: Show cloned files scructure
        run: docker container run --rm -v $(pwd):$(pwd) iankoulski/tree $(pwd)/.github/test-cloned-repos

  push:
    name: Push CLI Docker Images
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - uses: actions/checkout@v2
        with:
          # The command will compute the current version to get the docker image name, so it needs all tags
          fetch-depth: 0

      - name: Download artifact cloner.dockerimage from build
        uses: actions/download-artifact@v2
        with:
          name: cloner.dockerimage

      - name: Load Docker Image Binary for cache
        run: |
          ls -la ./cloner.dockerimage
          docker load -i ./cloner.dockerimage

      # https://github.com/marcellodesales/cloner/packages?package_type=Docker
      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ github.repository_owner }}
          password: ${{ secrets.REGISTRY_GITHUB_TOKEN }}

      # Publishes the Docker Images to Github Container Registry
      - name: Push Docker Development Images
        run: make docker-push-develop